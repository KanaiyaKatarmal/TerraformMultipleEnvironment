name: 'terraform-Azure'

on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'  

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

env: 
  ROOT_PATH: '${{github.workspace}}/terraform-azure'
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
  STAGE_NAME: production
  
permissions:
  contents: read

jobs:
  terraform_plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    
    
    steps:
    - name: terraform Init
      run: |
        echo "${GITHUB_REF_NAME}-server"
        echo "GIT_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        echo "GIT_BRANCH=${GIT_BRANCH}"
      
#    - name: Checkout
#      uses: actions/checkout@v3

#    - name: Setup terraform
#      uses: hashicorp/setup-terraform@v1

  
#    - name: terraform init
#      run: terraform init -backend-config="dev-backend.conf"
#      working-directory: ${{ env.ROOT_PATH }}

#    - name: terraform Plan
#      run: terraform plan -var-file="dev-app.tfvar"
#      working-directory: ${{ env.ROOT_PATH }}

     
  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
 
    - name: terraform Init
      run: terraform init -backend-config="dev-backend.conf"
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform Apply
      run: terraform apply -auto-approve -var-file="dev-app.tfvar"
      working-directory: ${{ env.ROOT_PATH }}

    # - name: terraform destroy
    #   run: terraform destroy -auto-approve
    #   if: ${{inputs.tf_destroy}} == true
    #   working-directory: ${{ env.ROOT_PATH }}
